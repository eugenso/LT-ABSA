/*
 * ******************************************************************************
 *  Copyright 2017
 *  Copyright (c) 2017 Universit√§t Hamburg
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 * ****************************************************************************
 */

package uhh_lt.ABSA.ABSentiment.featureExtractor.util;

import org.jobimtext.api.struct.IThesaurusDatastructure;
import org.jobimtext.api.struct.Order2;
import org.jobimtext.api.struct.WebThesaurusDatastructure;
import uhh_lt.ABSA.ABSentiment.training.util.ProblemBuilder;

import java.io.*;
import java.util.HashMap;
import java.util.List;

/**
 * DTWebAPI uses the list of words generated by DTHelper class to expand these terms using distributional thesaurus
 * Created by abhishek on 24/5/17.
 */
public class DTWebAPI extends ProblemBuilder{

    protected static final int numberOfSimilarWords = 6;
    protected static IThesaurusDatastructure<String, String> dt;
    protected static List<Order2> similarWords;

    public static void main(String args[]){
        initialise("configuration.txt");
        if(DTConfigurationFile != null){
            dt = new WebThesaurusDatastructure(DTConfigurationFile);
        }else{
            dt = new WebThesaurusDatastructure("conf_web_wikipedia_trigram.xml");
        }
        dt.connect();
        getExpansionUsingDT(missingWordsFile);
    }


    /**
     * Expands the word present in the missingWordsFile and writes their expansion along in a file
     * @param fileName path to the file containing the words for expansion
     */
    public static void getExpansionUsingDT(String fileName){
        HashMap<String, List<Order2>> hashMap = new HashMap<>();
        String word = "";
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(fileName));
            word = bufferedReader.readLine();
            while(word!=null){
                similarWords = dt.getSimilarTerms(word, numberOfSimilarWords);
                hashMap.put(word, similarWords);
                word = bufferedReader.readLine();
            }
            bufferedReader.close();
            Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(DTExpansionFile), "utf-8"));
            for(HashMap.Entry<String, List<Order2>> entry: hashMap.entrySet()){
                String item = entry.getKey();
                int flag = 0;
                for(Order2 element:entry.getValue()){
                    if(flag == 0){
                        flag = 1;
                    }else if(flag == 1){
                        item = item + "\t"+ element.key;
                        flag = 2;
                    }else{
                        item = item + " "+ element.key;
                    }
                }
                System.out.println(item);
                writer.write(item+"\n");
            }
            writer.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
